gnome_theme() {
  gsettings set org.gnome.desktop.interface gtk-theme "${1:-Juno}"
  gsettings set org.gnome.desktop.wm.preferences theme "${1:-Juno}"
  gsettings set org.gnome.shell.extensions.user-theme name "${1:-Juno}"
}

command_exists() {
  command -v $1 2> /dev/null 1>&2
}

psa() {
  ps aux | grep $@ | grep -v grep
}

sysupdate() {
  ## TODO... 
  if [ -f /etc/pacman.conf ]; then
    sudo pacman -Syyuu --noconfirm && sudo pacman -Qdtq --noconfirm | sudo pacman -Rs - --noconfirm && sudo pacman -Sc --noconfirm
  elif [ -d /etc/apt ]; then
    sudo apt update && sudo apt dist-upgrate -y && sudo apt autoremove -y && sudo apt autoclean
  fi
}

get_env() {
  # this function will return an env-var inside a .env-file
  # example: API_TOKEN=`get_env API_TOKEN .env`
  if [ $# -ge 1 ]; then
    FILE="${2:=.env}"
    if [ -f $FILE ]; then
      VAR=$(egrep "^${1}=" $FILE | xargs)
      echo ${VAR#*=}
    else
      >&2 echo "$FILE not found!"
      return 1
    fi
  else 
    >&2 echo "usage: $0 <VAR> [env-file]"
    return 1
  fi
}


# colors
[ -x /usr/bin/dircolors ] && alias \
  ls="ls --color=auto" \
  grep="grep --color=auto" \
  fgrep="fgrep --color=auto" \
  egrep="egrep --color=auto" \
  diff="diff --color=auto" \
;

# filesystem
alias ls="ls --group-directories-first --color=auto"
alias \
  cd..="cd .." \
  ll="ls -hlF" \
  la="ls -hAlF" \
  l="ls -CF" \
  .="source" \
;
command_exists xdg-open && alias open="xdg-open"

# commandline
alias \
  free="free -h" \
  df="df -h" \
  du="du -h" \
  se="sudoedit" \
  #sudo='sudo ' \
;
export LESS="-F -X $LESS" ## let less display information, that fits the screen directly

# json pretty print (e.g. for `curl` calls ... curl https://someurl/ | pj)
alias pj="python -m json.tool"

# git
alias \
  gits="git status" \
  gitss="git status -s" \
  gitc="git commit" \
  gita="git add ." \
  gitr="git reset HEAD -- " \
  gitl="git log --oneline --decorate --all --graph" \
  gitlp="git log --pretty=format:'%an%x09%ad%x09%s'" \
  gitd="git diff --color-words" \
  dotfiles="/usr/bin/git --git-dir=$HOME/.local/dotfiles.git --work-tree=$HOME" \
  lg="lazygit" \
;
[ -f ~/.config/git/git_init ] && source ~/.config/git/git_init

# tmux
if command_exists tmux; then
  alias \
    tmux="tmux -f ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux.conf" \
  ;
  function st {
    tmux -f ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux.conf attach -t ${1:-TMUX} || \
    tmux -f ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux.conf new -s ${1:-TMUX}
  }
fi

# java
for V in {7..40}; do
  OPENJDK="/usr/lib/jvm/java-${V}-openjdk"
  [ -d $OPENJDK ] && alias \
    java${V}=${OPENJDK}/bin/java \
    javac${V}=${OPENJDK}/bin/javac \
    jh${V}="JAVA_HOME=${OPENJDK}"
  ORACLEJDP="/usr/lib/jvm/java-${V}-jdk"
  [ -d $ORACLEJDP ] && alias \
    oj${V}=${ORACLEJDK}/bin/java \
    ojc${V}=${ORACLEJDK}/bin/javac \
    ojh${V}="JAVA_HOME=${ORACLEJDK}"
done
#JAVA8="/usr/lib/jvm/java-8-openjdk"
#[ -d "$JAVA8" ] && export JAVA_HOME="$JAVA8" && PATH=${JAVA_HOME}/bin:$PATH

# android
if [ -d $HOME/.local/Android/Sdk ]; then
  export ANDROID_SDK_ROOT=$HOME/.local/Android/Sdk
  export PATH=$PATH:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator
fi

# go
if [ -d $HOME/.local/go/bin ]; then
  export PATH=$PATH:$HOME/.local/go/bin
fi

# pandoc
if [ -x "$(command -v pandoc)" ]; then
  alias pd=pandoc
elif [ -x "$(command -v docker)" ]; then
  alias pandoc='docker run --user $(id -u $USER):$(id -g ${USER}) --rm --volume "$(pwd):/data" pandoc/core'
  alias pd=pandoc
  compdef pandoc='pandoc'
  compdef pd='pandoc'
  setopt completealiases
fi

# bluetooth
## source: https://bbs.archlinux.org/viewtopic.php?id=258363; https://unix.stackexchange.com/questions/508221/bluetooth-service-running-but-bluetoothctl-says-org-bluez-error-notready
earmic() {
  BT_CARD=$(pacmd list-cards | gawk 'match($0, /\sname: <(bluez.*)>/,a) {print a[1]}')
  if [ "$1" = "off" ]; then
    PROFILE="a2dp_sink"
  else
    bluetoothctl power on
    PROFILE="handsfree_head_unit"
  fi

  pacmd set-card-profile $BT_CARD $PROFILE
}

# efi-boot change nextBoot
reboot() {
  if ! type efibootmgr > /dev/null; then
    systemctl reboot
  fi

  LINUX=`efibootmgr | grep grub | cut -d '*' -f1`
  WINDOWS=`efibootmgr | grep Windows | cut -d '*' -f1`

  case $1 in
    linux|Linux|LINUX)
      BOOT_NEXT=${LINUX:4:9}
      ;;
    windows|Windows|WINDOWS)
      BOOT_NEXT=${WINDOWS:4:9}
      ;;
  esac

  if [ -n "$BOOT_NEXT" ]; then
    echo "set BootNext to $BOOT_NEXT"
    sudo efibootmgr --bootnext=$BOOT_NEXT
  fi

  sleep 3

  systemctl reboot
}

unset -f command_exists

# vim: ft=bash
